---
- name: Deploy AppGestion
  hosts: backend
  become: yes
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - docker.io
          - docker-compose
          - curl
          - python3-pip
          - python3-boto3
          - awscli
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Fix Docker socket permissions
      file:
        path: /var/run/docker.sock
        owner: root
        group: docker
        mode: '0664'

    - name: Reset ssh connection to allow user changes to affect current session
      meta: reset_connection

    - name: Verify Docker access for ubuntu user
      become_user: ubuntu
      command: docker ps
      register: docker_test
      ignore_errors: yes

    - name: Restart Docker service if needed
      systemd:
        name: docker
        state: restarted
      when: docker_test.failed

    - name: Get database credentials from AWS Secrets Manager
      shell: |
        aws secretsmanager get-secret-value --secret-id {{ db_secret_name }} --region {{ region }} --query SecretString --output text
      register: db_secret_result
      environment:
        AWS_DEFAULT_REGION: "{{ region }}"

    - name: Parse database credentials
      set_fact:
        db_creds: "{{ db_secret_result.stdout | from_json }}"

    - name: Get Docker credentials from AWS Secrets Manager
      shell: |
        aws secretsmanager get-secret-value --secret-id {{ docker_secret_name }} --region {{ region }} --query SecretString --output text
      register: docker_secret_result
      environment:
        AWS_DEFAULT_REGION: "{{ region }}"

    - name: Parse Docker credentials
      set_fact:
        docker_creds: "{{ docker_secret_result.stdout | from_json }}"

    - name: Login to DockerHub
      docker_login:
        username: "{{ docker_creds.username }}"
        password: "{{ docker_creds.password }}"
      become_user: ubuntu

    - name: Create application directory
      file:
        path: /opt/appgestion
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Create docker-compose file
      template:
        src: roles/appgestion/templates/docker-compose.yml.j2
        dest: /opt/appgestion/docker-compose.yml
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Create environment file
      template:
        src: roles/appgestion/templates/.env.j2
        dest: /opt/appgestion/.env
        owner: ubuntu
        group: ubuntu
        mode: '0600'

    - name: Pull Docker images
      shell: |
        cd /opt/appgestion
        docker-compose pull
      become_user: ubuntu

    - name: Stop existing containers
      shell: |
        cd /opt/appgestion
        docker-compose down || true
      become_user: ubuntu

    - name: Start services with docker-compose
      shell: |
        cd /opt/appgestion
        docker-compose up -d
      become_user: ubuntu

    - name: Wait for services to be ready
      wait_for:
        port: "{{ item }}"
        host: localhost
        delay: 10
        timeout: 300
        sleep: 5
      loop:
        - 3001
        - 3002
        - 80
      register: ports_check
      failed_when: false
      retries: 10
      delay: 15

    - name: Verify user service is running
      uri:
        url: "http://localhost:3001/health"
        method: GET
        status_code: 200
        return_content: yes
        timeout: 10
      retries: 10
      delay: 15
      register: user_health
      ignore_errors: true
      until: user_health.status is defined and user_health.status == 200

    - name: Verify product service is running
      uri:
        url: "http://localhost:3002/health"
        method: GET
        status_code: 200
        return_content: yes
        timeout: 10
      retries: 10
      delay: 15
      register: product_health
      ignore_errors: true
      until: product_health.status is defined and product_health.status == 200

    - name: Verify nginx service is running
      uri:
        url: "http://localhost:80/health"
        method: GET
        status_code: 200
        return_content: yes
      retries: 10
      delay: 15
      register: nginx_health
      ignore_errors: true

    - name: Debug service responses
      debug:
        msg: |
          User service response: {{ user_health.content | default('No response') }}
          Product service response: {{ product_health.content | default('No response') }}
          Nginx service response: {{ nginx_health.content | default('No response') }}
      when: user_health.status is defined or product_health.status is defined or nginx_health.status is defined

    - name: Report services status
      debug:
        msg: |
          User service status: {{ 'UP' if user_health.status is defined and user_health.status == 200 else 'DOWN - May require attention' }}
          Product service status: {{ 'UP' if product_health.status is defined and product_health.status == 200 else 'DOWN - May require attention' }}
          Nginx service status: {{ 'UP' if nginx_health.status is defined and nginx_health.status == 200 else 'DOWN - May require attention' }}
      failed_when: >
        (user_health.status is not defined or user_health.status != 200) or 
        (product_health.status is not defined or product_health.status != 200) or
        (nginx_health.status is not defined or nginx_health.status != 200)