version: '3.8'

networks:
  appgestion-network:
    driver: bridge

services:
  user-service:
    image: {{ docker_creds.username }}/appgestion-user-service:latest
    container_name: user-service
    environment:
      # Compatibilidad con ambos conjuntos de variables
      - POSTGRES_HOST=${USER_DB_HOST}
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
      - POSTGRES_PORT=${USER_DB_PORT}
      # Variables originales del app.py
      - USER_DB_HOST=${USER_DB_HOST}
      - USER_DB_NAME=${USER_DB_NAME}
      - USER_DB_USER=${USER_DB_USER}
      - USER_DB_PASSWORD=${USER_DB_PASSWORD}
      - USER_DB_PORT=${USER_DB_PORT}
      # Configuración adicional
      - DB_MAX_RETRIES=${DB_MAX_RETRIES:-30}
      - DB_RETRY_INTERVAL=${DB_RETRY_INTERVAL:-5}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-*}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "127.0.0.1:3001:3001"
    networks:
      - appgestion-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health || exit 1"]
      interval: ${HEALTH_CHECK_INTERVAL:-20}s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  product-service:
    image: {{ docker_creds.username }}/appgestion-product-service:latest
    container_name: product-service
    environment:
      # Compatibilidad con ambos conjuntos de variables
      - POSTGRES_HOST=${PRODUCT_DB_HOST}
      - POSTGRES_DB=${PRODUCT_DB_NAME}
      - POSTGRES_USER=${PRODUCT_DB_USER}
      - POSTGRES_PASSWORD=${PRODUCT_DB_PASSWORD}
      - POSTGRES_PORT=${PRODUCT_DB_PORT}
      # Variables originales del app.py
      - PRODUCT_DB_HOST=${PRODUCT_DB_HOST}
      - PRODUCT_DB_NAME=${PRODUCT_DB_NAME}
      - PRODUCT_DB_USER=${PRODUCT_DB_USER}
      - PRODUCT_DB_PASSWORD=${PRODUCT_DB_PASSWORD}
      - PRODUCT_DB_PORT=${PRODUCT_DB_PORT}
      # Configuración adicional
      - DB_MAX_RETRIES=${DB_MAX_RETRIES:-30}
      - DB_RETRY_INTERVAL=${DB_RETRY_INTERVAL:-5}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-*}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "127.0.0.1:3002:3002"
    networks:
      - appgestion-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health || exit 1"]
      interval: ${HEALTH_CHECK_INTERVAL:-30}s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        
  nginx:
    image: {{ docker_creds.username }}/appgestion-nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    environment:
      - CORS_ORIGIN=${CORS_ALLOWED_ORIGINS:-*}
      - STRICT_HEALTH_CHECK=${STRICT_HEALTH_CHECK:-false}
    depends_on:
      - user-service
      - product-service
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: ${HEALTH_CHECK_INTERVAL:-30}s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - appgestion-network
    restart: unless-stopped
    volumes:
      - ./nginx-logs:/var/log/nginx
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"